<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        :root {
            --primary-color: #1da1f2;
            --secondary-color: #fbad17;
            --text-color: #333;
            --light-gray: #f8f9fa;
            --border-color: #e0e0e0;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7f9;
            color: #333;
            overflow-x: hidden;
        }
        
        /* Layout */
        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }
        
        /* Sidebar */
        .sidebar {
            width: 280px;
            background: white;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            z-index: 1000;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
        }
        
        .sidebar.collapsed {
            width: 80px;
        }
        
        .sidebar.collapsed .sidebar-text {
            display: none;
        }
        
        .sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo-container {
            display: flex;
            align-items: center;
        }
        
        .logo {
            width: 40px;
            height: 40px;
            margin-right: 12px;
            background: var(--primary-color);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        
        .logo-text {
            font-weight: 700;
            font-size: 1.25rem;
            color: var(--primary-color);
        }
        
        .nav-menu {
            padding: 1rem;
        }
        
        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.875rem 1rem;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            color: #666;
            text-decoration: none;
            transition: all 0.2s;
        }
        
        .nav-item:hover, .nav-item.active {
            background: rgba(29, 161, 242, 0.1);
            color: var(--primary-color);
        }
        
        .nav-item i {
            margin-right: 12px;
            width: 20px;
            text-align: center;
        }
        
        .nav-item.logout {
            margin-top: 2rem;
            color: #dc3545;
        }
        
        .nav-item.logout:hover {
            background: rgba(220, 53, 69, 0.1);
        }
        
        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 280px;
            transition: margin-left 0.3s ease;
        }
        
        .main-content.expanded {
            margin-left: 80px;
        }
        
        /* Header */
        .header {
            background: linear-gradient(120deg, var(--primary-color), #0f8bd6);
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .menu-toggle {
            display: none;
            background: none;
            border: none;
            color: white;
            font-size: 1.25rem;
            cursor: pointer;
        }
        
        .header-title {
            font-size: 1.5rem;
            font-weight: 600;
        }
        
        .header-actions {
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }
        
        .notification-btn {
            position: relative;
            background: none;
            border: none;
            color: white;
            font-size: 1.25rem;
            cursor: pointer;
        }
        
        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #e74c3c;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            font-size: 0.7rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .user-profile {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            cursor: pointer;
        }
        
        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: white;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }
        
        .user-name {
            font-weight: 500;
        }
        
        /* Content Area */
        .content {
            padding: 2rem;
        }
        
        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.04);
            display: flex;
            align-items: center;
            transition: transform 0.2s;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-right: 1rem;
        }
        
        .icon-blue {
            background: rgba(29, 161, 242, 0.1);
            color: var(--primary-color);
        }
        
        .icon-green {
            background: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }
        
        .icon-amber {
            background: rgba(251, 173, 23, 0.1);
            color: var(--secondary-color);
        }
        
        .stat-info h3 {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }
        
        .stat-info p {
            color: #666;
            font-size: 0.9rem;
        }
        
        /* Section Headers */
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333;
        }
        
        .view-all {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 500;
        }
        
        .view-all:hover {
            text-decoration: underline;
        }
        
        /* Courses Grid */
        .courses-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .course-card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.04);
            transition: transform 0.2s;
        }
        
        .course-card:hover {
            transform: translateY(-5px);
        }
        
        .course-header {
            height: 160px;
            position: relative;
        }
        
        .course-badge {
            position: absolute;
            top: 1rem;
            left: 1rem;
            background: var(--secondary-color);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .badge-completed {
            background: #28a745;
        }
        
        .badge-not-started {
            background: #6c757d;
        }
        
        .course-title {
            position: absolute;
            bottom: 1rem;
            left: 1rem;
            color: white;
        }
        
        .course-title h3 {
            font-size: 1.25rem;
            margin-bottom: 0.25rem;
        }
        
        .course-title p {
            font-size: 0.9rem;
            opacity: 0.9;
        }
        
        .course-content {
            padding: 1.5rem;
        }
        
        .progress-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.75rem;
            font-size: 0.9rem;
        }
        
        .progress-percent {
            color: #666;
        }
        
        .progress-lessons {
            color: var(--primary-color);
            font-weight: 500;
        }
        
        .progress-bar {
            height: 8px;
            background: #f0f0f0;
            border-radius: 4px;
            margin-bottom: 1rem;
            overflow: hidden;
        }
        
        .progress-value {
            height: 100%;
            border-radius: 4px;
            background: var(--primary-color);
            transition: width 0.5s ease;
        }
        
        .course-actions {
            display: flex;
            justify-content: space-between;
        }
        
        .course-link {
            color: var(--primary-color);
            text-decoration: none;
            font-size: 0.9rem;
            font-weight: 500;
        }
        
        .course-link:hover {
            text-decoration: underline;
        }
        
        .expand-btn {
            color: #666;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
        }
        
        .expand-btn:hover {
            color: var(--primary-color);
        }
        
        /* Profile Section */
        .profile-section {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.04);
            margin-bottom: 2rem;
        }
        
        .profile-form {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #333;
        }
        
        .form-input {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.2s;
        }
        
        .form-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }
        
        .form-input:disabled {
            background-color: #f8f9fa;
            color: #6c757d;
        }
        
        .form-actions {
            grid-column: 1 / -1;
            display: flex;
            justify-content: flex-end;
        }
        
        .btn-primary {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .btn-primary:hover {
            background: #0c85d0;
        }
        
        /* Overlay for mobile */
        .overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }
        
        .overlay.active {
            display: block;
        }
        
        /* Responsive styles */
        @media (max-width: 992px) {
            .sidebar {
                transform: translateX(-100%);
            }
            
            .sidebar.active {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0 !important;
            }
            
            .menu-toggle {
                display: block;
            }
        }
        
        @media (max-width: 768px) {
            .content {
                padding: 1rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .courses-grid {
                grid-template-columns: 1fr;
            }
            
            .profile-form {
                grid-template-columns: 1fr;
            }
            
            .header {
                padding: 1rem;
            }
            
            .user-name {
                display: none;
            }
        }
        
        /* Gradients for course headers */
        .gradient-blue {
            background: linear-gradient(120deg, #4facfe 0%, #00f2fe 100%);
        }
        
        .gradient-green {
            background: linear-gradient(120deg, #43e97b 0%, #38f9d7 100%);
        }
        
        .gradient-purple {
            background: linear-gradient(120deg, #a18cd1 0%, #fbc2eb 100%);
        }
        
        /* Loading state */
        .loading {
            opacity: 0.7;
            pointer-events: none;
        }
        
        .loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 30px;
            height: 30px;
            margin: -15px 0 0 -15px;
            border: 3px solid rgba(29, 161, 242, 0.3);
            border-radius: 50%;
            border-top-color: var(--primary-color);
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Overlay for mobile -->
        <div class="overlay" id="overlay"></div>

        <!-- Sidebar -->
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <div class="logo-container">
                    <div class="logo">DSA</div>
                    <div class="logo-text sidebar-text">Dashboard</div>
                </div>
                <button id="collapse-toggle" class="sidebar-text">
                    <i class="fas fa-angle-double-left"></i>
                </button>
            </div>

            <div class="nav-menu">
                <a href="#" class="nav-item active">
                    <i class="fas fa-home"></i>
                    <span class="sidebar-text">Dashboard</span>
                </a>
                <a href="#profile" class="nav-item">
                    <i class="fas fa-user"></i>
                    <span class="sidebar-text">Profile</span>
                </a>
                <a href="#courses" class="nav-item">
                    <i class="fas fa-book"></i>
                    <span class="sidebar-text">My Courses</span>
                </a>
                <a href="#certificates" class="nav-item">
                    <i class="fas fa-certificate"></i>
                    <span class="sidebar-text">Certificates</span>
                </a>
                <a href="#resources" class="nav-item">
                    <i class="fas fa-file-download"></i>
                    <span class="sidebar-text">Resources</span>
                </a>
                <a href="#" id="logout-btn" class="nav-item logout">
                    <i class="fas fa-sign-out-alt"></i>
                    <span class="sidebar-text">Logout</span>
                </a>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content" id="main-content">
            <!-- Header -->
            <header class="header">
                <div class="header-left">
                    <button id="menu-toggle" class="menu-toggle">
                        <i class="fas fa-bars"></i>
                    </button>
                    <h1 class="header-title">Welcome back, <span id="user-name">Student</span>!</h1>
                </div>

                <div class="header-actions">
                    <button class="notification-btn">
                        <i class="fas fa-bell"></i>
                        <span class="notification-badge">3</span>
                    </button>
                    <div class="user-profile">
                        <div class="avatar" id="user-avatar">SM</div>
                        <span class="user-name" id="user-fullname">Student Name</span>
                    </div>
                </div>
            </header>

            <!-- Content Area -->
            <div class="content">
                <!-- Stats Section -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon icon-blue">
                            <i class="fas fa-book"></i>
                        </div>
                        <div class="stat-info">
                            <h3 id="enrolled-courses">0</h3>
                            <p>Enrolled Courses</p>
                        </div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-icon icon-green">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <div class="stat-info">
                            <h3 id="completed-courses">0</h3>
                            <p>Completed</p>
                        </div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-icon icon-amber">
                            <i class="fas fa-certificate"></i>
                        </div>
                        <div class="stat-info">
                            <h3 id="certificates-count">0</h3>
                            <p>Certificates</p>
                        </div>
                    </div>
                </div>

                <!-- My Courses Section -->
                <div class="courses-section" id="courses">
                    <div class="section-header">
                        <h2 class="section-title">My Courses</h2>
                        <a href="#" class="view-all">View all</a>
                    </div>

                    <div class="courses-grid" id="courses-container">
                        <!-- Courses will be loaded dynamically -->
                    </div>
                </div>

                <!-- Profile Section -->
                <div class="profile-section" id="profile">
                    <h2 class="section-title">Profile Information</h2>

                    <form class="profile-form" id="profile-form">
                        <div class="form-column">
                            <div class="form-group">
                                <label class="form-label">Full Name</label>
                                <input type="text" id="fullname" class="form-input" required>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Email Address</label>
                                <input type="email" id="email" class="form-input" required>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Phone Number</label>
                                <input type="tel" id="phone" class="form-input" required>
                            </div>
                        </div>

                        <div class="form-column">
                            <div class="form-group">
                                <label class="form-label">School/Institution</label>
                                <input type="text" id="school" class="form-input" required>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Enrollment Date</label>
                                <input type="text" id="enrollment-date" class="form-input" disabled>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Student ID</label>
                                <input type="text" id="student-id" class="form-input" disabled>
                            </div>
                        </div>

                        <div class="form-actions">
                            <button type="submit" class="btn-primary">Update Profile</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Supabase initialization
        const SUPABASE_URL = "https://pbxccdobbiebsyiypgvl.supabase.co";
        const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBieGNjZG9iYmllYnN5aXlwZ3ZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzA2NTYsImV4cCI6MjA3MzUwNjY1Nn0.xgnj4uYG28VvPptlGjI-gVJ24NCc_qbVzwv3rxU4xp4";
        
        const client = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        
        // DOM Elements
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.getElementById('main-content');
        const menuToggle = document.getElementById('menu-toggle');
        const overlay = document.getElementById('overlay');
        const collapseToggle = document.getElementById('collapse-toggle');
        const logoutBtn = document.getElementById('logout-btn');
        const profileForm = document.getElementById('profile-form');
        const coursesContainer = document.getElementById('courses-container');
        
        // State variables
        let userData = null;
        let coursesData = [];
        
        // Initialize the dashboard
        document.addEventListener('DOMContentLoaded', function() {
            initSidebar();
            checkAuth();
            loadUserData();
            loadCourses();
            
            // Smooth scrolling for anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const targetId = this.getAttribute('href');
                    if (targetId === '#') return;
                    
                    const targetElement = document.querySelector(targetId);
                    if (targetElement) {
                        targetElement.scrollIntoView({
                            behavior: 'smooth'
                        });
                        
                        // Update active nav item
                        document.querySelectorAll('.nav-item').forEach(item => {
                            item.classList.remove('active');
                        });
                        this.classList.add('active');
                    }
                });
            });
        });
        
        // Sidebar functionality
        function initSidebar() {
            menuToggle.addEventListener('click', function() {
                sidebar.classList.toggle('active');
                overlay.classList.toggle('active');
            });
            
            overlay.addEventListener('click', function() {
                sidebar.classList.remove('active');
                overlay.classList.remove('active');
            });
            
            collapseToggle.addEventListener('click', function() {
                sidebar.classList.toggle('collapsed');
                mainContent.classList.toggle('expanded');
                
                // Change icon based on state
                const icon = collapseToggle.querySelector('i');
                if (sidebar.classList.contains('collapsed')) {
                    icon.classList.remove('fa-angle-double-left');
                    icon.classList.add('fa-angle-double-right');
                } else {
                    icon.classList.remove('fa-angle-double-right');
                    icon.classList.add('fa-angle-double-left');
                }
            });
        }
        
        // Check if user is authenticated
        async function checkAuth() {
            const { data: { session }, error } = await client.auth.getSession();
            
            if (!session || error) {
                // Redirect to login page if not authenticated
                window.location.href = 'login.html';
                return;
            }
            
            // Set up auth state listener
            client.auth.onAuthStateChange((event, session) => {
                if (event === 'SIGNED_OUT') {
                    window.location.href = 'login.html';
                }
            });
        }
        
        // Load user data from Supabase
        async function loadUserData() {
            try {
                // Get current user
                const { data: { user }, error: userError } = await client.auth.getUser();
                
                if (userError) throw userError;
                
                if (user) {
                    // Get user profile from user_profiles table
                    const { data: profile, error: profileError } = await client
                        .from('user_profiles')
                        .select('*')
                        .eq('id', user.id)
                        .single();
                    
                    if (profileError) {
                        console.error('Error loading profile:', profileError);
                        // Create a basic profile if it doesn't exist
                        await createUserProfile(user);
                    } else {
                        userData = { ...user, ...profile };
                        updateUIWithUserData();
                    }
                }
            } catch (error) {
                console.error('Error loading user data:', error);
                alert('Error loading user data. Please try again.');
            }
        }
        
        // Create user profile if it doesn't exist
        async function createUserProfile(user) {
            try {
                // Extract user metadata
                const { 
                    full_name = '', 
                    phone = '', 
                    course = '', 
                    student_id = '', 
                    school = '', 
                    enrollment_date = '' 
                } = user.user_metadata || {};
                
                // Insert into user_profiles table
                const { data, error } = await client
                    .from('user_profiles')
                    .insert([
                        {
                            id: user.id,
                            full_name,
                            phone,
                            course,
                            student_id,
                            school,
                            enrollment_date,
                            created_at: new Date().toISOString()
                        }
                    ])
                    .select()
                    .single();
                
                if (error) throw error;
                
                userData = { ...user, ...data };
                updateUIWithUserData();
            } catch (error) {
                console.error('Error creating user profile:', error);
            }
        }
        
        // Update UI with user data
        function updateUIWithUserData() {
            if (!userData) return;
            
            // Update header
            document.getElementById('user-name').textContent = userData.user_metadata?.full_name || userData.full_name || 'Student';
            document.getElementById('user-fullname').textContent = userData.user_metadata?.full_name || userData.full_name || 'Student Name';
            
            // Update avatar
            const avatar = document.getElementById('user-avatar');
            const fullName = userData.user_metadata?.full_name || userData.full_name || '';
            if (fullName) {
                const initials = fullName.split(' ').map(name => name[0]).join('').toUpperCase();
                avatar.textContent = initials;
            }
            
            // Update profile form
            document.getElementById('fullname').value = userData.user_metadata?.full_name || userData.full_name || '';
            document.getElementById('email').value = userData.email || '';
            document.getElementById('phone').value = userData.user_metadata?.phone || userData.phone || '';
            document.getElementById('school').value = userData.user_metadata?.school || userData.school || 'Digital Solution Academy';
            document.getElementById('enrollment-date').value = userData.user_metadata?.enrollment_date || userData.enrollment_date || '';
            document.getElementById('student-id').value = userData.user_metadata?.student_id || userData.student_id || '';
        }
        
        // Load courses from Supabase (mock data for now)
        async function loadCourses() {
            try {
                // In a real app, you would fetch this from your courses table
                // For now, we'll use mock data
                coursesData = [
                    {
                        id: 1,
                        title: "Web Development",
                        type: "Online Course",
                        progress: 65,
                        completedLessons: 12,
                        totalLessons: 18,
                        status: "In Progress",
                        gradient: "gradient-blue"
                    },
                    {
                        id: 2,
                        title: "Graphics Design",
                        type: "Physical Class",
                        progress: 0,
                        completedLessons: 0,
                        totalLessons: 24,
                        status: "Not Started",
                        gradient: "gradient-green"
                    },
                    {
                        id: 3,
                        title: "Computer Fundamentals",
                        type: "Physical Class",
                        progress: 100,
                        completedLessons: 20,
                        totalLessons: 20,
                        status: "Completed",
                        gradient: "gradient-purple"
                    }
                ];
                
                renderCourses();
                updateStats();
            } catch (error) {
                console.error('Error loading courses:', error);
            }
        }
        
        // Render courses to the UI
        function renderCourses() {
            if (!coursesContainer) return;
            
            coursesContainer.innerHTML = '';
            
            coursesData.forEach(course => {
                const courseCard = document.createElement('div');
                courseCard.className = 'course-card';
                
                const statusClass = course.status === 'Completed' ? 'badge-completed' : 
                                  course.status === 'Not Started' ? 'badge-not-started' : '';
                
                courseCard.innerHTML = `
                    <div class="course-header ${course.gradient}">
                        <span class="course-badge ${statusClass}">${course.status}</span>
                        <div class="course-title">
                            <h3>${course.title}</h3>
                            <p>${course.type}</p>
                        </div>
                    </div>
                    <div class="course-content">
                        <div class="progress-info">
                            <span class="progress-percent">${course.progress}% Complete</span>
                            <span class="progress-lessons">${course.completedLessons}/${course.totalLessons} Lessons</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-value" style="width: ${course.progress}%"></div>
                        </div>
                        <div class="course-actions">
                            <a href="#" class="course-link">
                                ${course.status === 'Completed' ? 'View Certificate' : 
                                  course.status === 'Not Started' ? 'Start Learning' : 'Continue Learning'}
                            </a>
                            <button class="expand-btn">
                                <i class="fas fa-expand"></i>
                            </button>
                        </div>
                    </div>
                `;
                
                coursesContainer.appendChild(courseCard);
            });
        }
        
        // Update stats based on courses
        function updateStats() {
            const enrolled = coursesData.length;
            const completed = coursesData.filter(course => course.status === 'Completed').length;
            const certificates = completed; // Assuming 1 certificate per completed course
            
            document.getElementById('enrolled-courses').textContent = enrolled;
            document.getElementById('completed-courses').textContent = completed;
            document.getElementById('certificates-count').textContent = certificates;
        }
        
        // Handle profile form submission
        profileForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!userData) return;
            
            try {
                // Get form values
                const full_name = document.getElementById('fullname').value;
                const email = document.getElementById('email').value;
                const phone = document.getElementById('phone').value;
                const school = document.getElementById('school').value;
                
                // Update user in Auth
                const { error: authError } = await client.auth.updateUser({
                    email: email,
                    data: { full_name, phone, school }
                });
                
                if (authError) throw authError;
                
                // Update user in user_profiles table
                const { error: profileError } = await client
                    .from('user_profiles')
                    .update({
                        full_name,
                        phone,
                        school,
                        updated_at: new Date().toISOString()
                    })
                    .eq('id', userData.id);
                
                if (profileError) throw profileError;
                
                // Reload user data
                await loadUserData();
                
                alert('Profile updated successfully!');
            } catch (error) {
                console.error('Error updating profile:', error);
                alert('Error updating profile. Please try again.');
            }
        });
        
        // Handle logout
        logoutBtn.addEventListener('click', async function(e) {
            e.preventDefault();
            
            try {
                const { error } = await client.auth.signOut();
                if (error) throw error;
                
                // Redirect will happen automatically due to auth state change listener
            } catch (error) {
                console.error('Error signing out:', error);
                alert('Error signing out. Please try again.');
            }
        });
    </script>
</body>
</html>